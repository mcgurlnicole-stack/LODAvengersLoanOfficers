<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Loan Avengers Playbook</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            color: #333;
        }
        /* Custom scrollbar for better aesthetics */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-thumb {
            background-color: #d1d5db;
            border-radius: 4px;
        }
        ::-webkit-scrollbar-track {
            background-color: #f3f4f6;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-4xl bg-white rounded-xl shadow-lg p-6 md:p-8">
        <div class="flex flex-col items-center justify-center mb-6 text-center">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-800 mb-2">Loan Avengers Playbook</h1>
            <p class="text-gray-500 text-lg">Your guide to handling client objections with confidence.</p>
            <p id="auth-status" class="text-xs text-gray-400 mt-2">Connecting to database...</p>
        </div>

        <!-- Search Bar -->
        <div class="mb-6">
            <input type="text" id="searchInput" placeholder="Search objections..." class="w-full px-4 py-3 rounded-xl border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-shadow">
        </div>

        <!-- Playbook Content -->
        <div id="playbook-content" class="min-h-[200px] flex flex-col items-center justify-center w-full">
            <!-- Content will be injected here by JavaScript -->
            <p class="text-gray-500 text-center text-lg">Loading playbook...</p>
        </div>

        <!-- Call to Action for Visitors -->
        <div class="mt-8 pt-6 border-t border-gray-200 text-center">
            <h2 class="text-xl font-semibold text-gray-700 mb-2">Want to build your own playbook?</h2>
            <p class="text-gray-600 mb-4">You can create, edit, and manage your own version of this app.</p>
            <button onclick="window.location.href = `https://immersive.google.com/canvas?app_id=${getAppId()}`" class="bg-blue-600 text-white py-2.5 px-6 rounded-xl font-semibold hover:bg-blue-700 transition-colors">
                Get Your Own Playbook
            </button>
        </div>
    </div>
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, onSnapshot, query, where, getDocs } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Set log level for detailed Firestore logs in the console
        setLogLevel('debug');

        // Firebase global variables
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
        
        let app;
        let auth;
        let db;
        let authStatusEl = document.getElementById('auth-status');
        let playbookData = [];
        let userId;

        function getAppId() {
            return appId;
        }
        window.getAppId = getAppId;

        // Get user ID from URL or generate a new one
        function getUserIdFromUrl() {
            const params = new URLSearchParams(window.location.search);
            return params.get('user');
        }

        async function setupApp() {
            if (firebaseConfig) {
                try {
                    app = initializeApp(firebaseConfig);
                    auth = getAuth(app);
                    db = getFirestore(app);

                    userId = getUserIdFromUrl();

                    if (!userId) {
                       await signInAnonymously(auth);
                       onAuthStateChanged(auth, (user) => {
                           if (user) {
                               userId = user.uid;
                               authStatusEl.textContent = 'Authenticated. Please get the shareable link from your app.';
                               renderPlaybook([]);
                           }
                       });
                    } else {
                        setupRealtimeListener(userId);
                    }
                } catch (error) {
                    console.error("Error setting up Firebase:", error);
                    authStatusEl.textContent = 'Failed to connect to database. Please check your network connection.';
                }
            } else {
                 authStatusEl.textContent = 'Firebase config not found. Unable to load playbook.';
            }
        }

        function setupRealtimeListener(uid) {
            if (!db || !uid) {
                console.error("Firestore or User ID is not available.");
                return;
            }
            const playbookCollectionPath = `/artifacts/${appId}/users/${uid}/objections`;
            const q = query(collection(db, playbookCollectionPath));

            onSnapshot(q, (querySnapshot) => {
                playbookData = [];
                querySnapshot.forEach((doc) => {
                    playbookData.push({ id: doc.id, ...doc.data() });
                });
                renderPlaybook(playbookData);
                authStatusEl.textContent = 'Live data loaded from the database.';
            }, (error) => {
                console.error("Error fetching playbook data:", error);
                authStatusEl.textContent = 'Error loading playbook. Please try again.';
            });
        }

        function renderPlaybook(data, query = '') {
            const playbookContentEl = document.getElementById('playbook-content');
            const normalizedQuery = query.toLowerCase().trim();
            const filteredData = data.filter(item => {
                return (item.objection && item.objection.toLowerCase().includes(normalizedQuery)) ||
                       (item.responses && item.responses.some(res => res.text.toLowerCase().includes(normalizedQuery))) ||
                       (item.category && item.category.toLowerCase().includes(normalizedQuery));
            });

            if (filteredData.length === 0) {
                playbookContentEl.innerHTML = `<p class="text-gray-500 text-center text-lg mt-8">No matching objections found.</p>`;
                return;
            }

            const groupedData = filteredData.reduce((acc, item) => {
                if (!acc[item.category]) {
                    acc[item.category] = [];
                }
                acc[item.category].push(item);
                return acc;
            }, {});

            let html = '';
            for (const category in groupedData) {
                html += `
                    <div class="mb-8 w-full">
                        <h2 class="text-xl md:text-2xl font-semibold text-gray-700 mb-4">${category}</h2>
                        <div class="space-y-4">
                            ${groupedData[category].map(item => `
                                <div class="bg-gray-100 p-5 rounded-lg flex justify-between items-start">
                                    <div class="flex-grow pr-4">
                                        <h3 class="text-lg font-bold text-gray-900 mb-2">Objection: "${item.objection}"</h3>
                                        <div class="space-y-4">
                                            ${item.responses.map(response => `
                                                <div>
                                                    <p class="font-semibold text-gray-800 mb-1">${response.title}:</p>
                                                    <p class="text-gray-600">${response.text}</p>
                                                </div>
                                            `).join('')}
                                        </div>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;
            }
            playbookContentEl.innerHTML = html;
        }

        document.getElementById('searchInput').addEventListener('keyup', (e) => {
            renderPlaybook(playbookData, e.target.value);
        });

        setupApp();
    </script>
</body>
</html>